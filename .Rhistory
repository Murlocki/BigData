pictures = read_html(url) %>% html_nodes("div>section>table>tbody>tr>td")
pictures= pictures[seq(4,length(pictures),by=5)]
pictures= sapply(pictures,getPictLink)
pictures = data.frame(PictureLink=pictures)
print(pictures)
result = cbind(data,pictures) %>% cbind(Links)
result
View(result)
url = "https://ru.m.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%BC%D1%83%D0%B7%D0%B5%D0%B5%D0%B2_%D0%A0%D0%BE%D1%81%D1%82%D0%BE%D0%B2%D1%81%D0%BA%D0%BE%D0%B9_%D0%BE%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D0%B8"
data = read_html(url) %>% html_nodes("div section table") %>% html_table() %>% as.data.frame()
data = data[c(-1,-5,-4)]
dim(data)
data
#Ссылки на музеи
museum = read_html(url) %>% html_nodes("div>section>table>tbody>tr>td")
museum=museum[seq(2,length(museum),by=5)]
length(museum)
ex=html_nodes(museum,"sup>a")
allNameLinks = html_nodes(museum,"a")
Links=allNameLinks[!(allNameLinks %in% ex)] %>% html_attr("href")
Links= Links[!duplicated(Links)]
Links = data.frame(Links=paste(c("https://ru.m.wikipedia.org/"),Links,sep=""))
print(Links)
#Ссылки на картинки
getPictLink = function(x){
if(length(html_nodes(x,"span>a"))>0){
link = (html_nodes(x,"span>a") %>% html_attr("href"))
return(paste(c("https://ru.m.wikipedia.org/"),link,sep=""))
}
else{
return(NA)
}
}
pictures = read_html(url) %>% html_nodes("div>section>table>tbody>tr>td")
pictures= pictures[seq(4,length(pictures),by=5)]
pictures= sapply(pictures,getPictLink)
pictures = data.frame(PictureLink=pictures)
print(pictures)
result = cbind(data,pictures) %>% cbind(Links)
result
View(result)
View(result)
library(rvest)
url_data  = read_html("https://www.numbeo.com/quality-of-life/rankings_by_country.jsp?title=2021")
#Выдернули года
years = html_nodes(url_data,"select[name='title'] option") %>% html_attr("value")
years = years[years>="2014" & years<="2021"]
years
#Функция получения таблицы по ссылке
getTable = function(year){
country_names = c("Finland", "Denmark", "France", "Germany","Romania")
link = paste("https://www.numbeo.com/quality-of-life/rankings_by_country.jsp?title=",year,sep="")
url_data = read_html(link)
table = html_table(html_nodes(url_data,"div table"))[[2]] %>% as.data.frame()
table[,1]=c(1:length(table[,1]))
table=table[table$Country %in% country_names,]
table = cbind(data.frame(Year=year,table))
return(table)
}
#Создаем 1 общую таблицу
data = do.call(rbind,lapply(years,getTable))
rownames(data)=c(1:dim(data)[1])
data[data=="-"]=0
data
View(data)
View(data)
View(data)
View(data)
View(data)
createPlot=function(number,title){
plot.new()
grid(nx = NULL, ny = NULL,
lty = 1,      # Grid line type
col = "gray", # Grid line color
lwd = 1)      # Grid line width
par(new=TRUE)
print(c(min(data[,number]),max(data[,number])))
plot(c(1:length(years)),rev(data[,number][data$Country=="Finland"]),ylab=title,xlab="",type='b', lwd=2,col="green",xaxt="n",ylim=c(as.numeric(min(data[,number])),as.numeric(max(data[,number]))),
pch=20,main="Значение выбранного параметра для стран")
lines(c(1:length(years)),rev(data[,number][data$Country=="Denmark"]),col='blue',type='b',pch=20,lwd=2)
lines(c(1:length(years)),rev(data[,number][data$Country=="France"]),col='red',type='b',pch=20,lwd=2)
lines(c(1:length(years)),rev(data[,number][data$Country=="Germany"]),col='purple',type='b',pch=20,lwd=2)
lines(c(1:length(years)),rev(data[,number][data$Country=="Romania"]),col='orange',type='b',pch=20,lwd=2)
#Настроили заголовки
axis.labels = rev(years)
axis(1, at = c(1:length(years)), labels = axis.labels,las=2,cex.axis=0.8)
title(xlab="Year", line=4, cex.lab=1.2)
return("")
}
layout(matrix(1:2),nrow=1,ncol=2)
layout(matrix(1:2,nrow=1,ncol=2))
createPlot(2,"Rank")
plot(1:2,1:2,xaxt="n",yaxt="n",main="Легенда",xlab="",ylab="")
legend('topright',cex=2.7,title='Страны',c("Finland", "Denmark", "France", "Germany","Romania"),lty=c(1,1,1,1,1),pch=c(20,20,20,20,20),col=c('green','blue','red','purple','orange'))
layout(matrix(1:2,nrow=1,ncol=2))
createPlot(2,"Rank")
plot(1:2,1:2,xaxt="n",yaxt="n",main="Легенда",xlab="",ylab="")
legend('topright',cex=2.7,title='Страны',c("Finland", "Denmark", "France", "Germany","Romania"),lty=c(1,1,1,1,1),pch=c(20,20,20,20,20),col=c('green','blue','red','purple','orange'))
layout(matrix(1:2,nrow=1,ncol=2))
createPlot(2,"Rank")
plot(1:2,1:2,xaxt="n",yaxt="n",main="Легенда",xlab="",ylab="")
legend('topright',cex=2,title='Страны',c("Finland", "Denmark", "France", "Germany","Romania"),lty=c(1,1,1,1,1),pch=c(20,20,20,20,20),col=c('green','blue','red','purple','orange'))
createPlot(2,"Rank")
legend('topright',cex=2,title='Страны',c("Finland", "Denmark", "France", "Germany","Romania"),lty=c(1,1,1,1,1),pch=c(20,20,20,20,20),col=c('green','blue','red','purple','orange'))
createPlot(2,"Rank")
legend('top',cex=1,title='Страны',c("Finland", "Denmark", "France", "Germany","Romania"),lty=c(1,1,1,1,1),pch=c(20,20,20,20,20),col=c('green','blue','red','purple','orange'))
createPlot(2,"Rank")
legend('top',cex=1,title='Страны',c("Finland", "Denmark", "France", "Germany","Romania"),lty=c(1,1,1,1,1),pch=c(20,20,20,20,20),col=c('green','blue','red','purple','orange'))
createPlot(2,"Rank")
legend('top',cex=1,title='Страны',c("Finland", "Denmark", "France", "Germany","Romania"),lty=c(1,1,1,1,1),pch=c(20,20,20,20,20),col=c('green','blue','red','purple','orange'))
layout(matrix(1:6,nrow=2,ncol=3))
createPlot(4,"Country Quality.of.Life.Index")
createPlot(5,"Purchasing.Power.Index")
createPlot(6,"Safety.Index")
createPlot(7,"Health.Care.Index")
#Легенда
plot(1:2,1:2,xaxt="n",yaxt="n",main="Легенда",xlab="",ylab="")
legend('topright',cex=2.7,title='Страны',c("Finland", "Denmark", "France", "Germany","Romania"),lty=c(1,1,1,1,1),pch=c(20,20,20,20,20),col=c('green','blue','red','purple','orange'))
layout(matrix(1:6,nrow=2,ncol=3))
createPlot(4,"Country Quality.of.Life.Index")
createPlot(5,"Purchasing.Power.Index")
createPlot(6,"Safety.Index")
createPlot(7,"Health.Care.Index")
#Легенда
plot(1:2,1:2,xaxt="n",yaxt="n",main="Легенда",xlab="",ylab="")
legend('topright',cex=2.7,title='Страны',c("Finland", "Denmark", "France", "Germany","Romania"),lty=c(1,1,1,1,1),pch=c(20,20,20,20,20),col=c('green','blue','red','purple','orange'))
layout(matrix(1:6,nrow=2,ncol=3))
createPlot(8,"Cost.of.Living.Index")
createPlot(9,"Property.Price.to.Income.Ratio")
createPlot(10,"Traffic.Commute.Time.Index")
createPlot(11,"Pollution.Index")
createPlot(12,"Climate.Index")
plot(1:2,1:2,xaxt="n",yaxt="n",main="Легенда",xlab="",ylab="")
legend('topright',cex=2,title='Страны',c("Finland", "Denmark", "France", "Germany","Romania"),lty=c(1,1,1,1,1),pch=c(20,20,20,20,20),col=c('green','blue','red','purple','orange'))
#Рисуем график
layout(matrix(1:6,nrow=2,ncol=3))
createPlot(4,"Country Quality.of.Life.Index")
createPlot(5,"Purchasing.Power.Index")
createPlot(6,"Safety.Index")
createPlot(7,"Health.Care.Index")
#Легенда
plot(1:2,1:2,xaxt="n",yaxt="n",main="Легенда",xlab="",ylab="")
legend('topright',cex=2.7,title='Страны',c("Finland", "Denmark", "France", "Germany","Romania"),lty=c(1,1,1,1,1),pch=c(20,20,20,20,20),col=c('green','blue','red','purple','orange'))
layout(matrix(1:6,nrow=2,ncol=3))
createPlot(8,"Cost.of.Living.Index")
createPlot(9,"Property.Price.to.Income.Ratio")
createPlot(10,"Traffic.Commute.Time.Index")
createPlot(11,"Pollution.Index")
createPlot(12,"Climate.Index")
plot(1:2,1:2,xaxt="n",yaxt="n",main="Легенда",xlab="",ylab="")
legend('topright',cex=2,title='Страны',c("Finland", "Denmark", "France", "Germany","Romania"),lty=c(1,1,1,1,1),pch=c(20,20,20,20,20),col=c('green','blue','red','purple','orange'))
url = "https://ru.m.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%BC%D1%83%D0%B7%D0%B5%D0%B5%D0%B2_%D0%A0%D0%BE%D1%81%D1%82%D0%BE%D0%B2%D1%81%D0%BA%D0%BE%D0%B9_%D0%BE%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D0%B8"
data = read_html(url) %>% html_nodes("div section table") %>% html_table() %>% as.data.frame()
data = data[c(-1,-5,-4)]
dim(data)
data
#Ссылки на музеи
museum = read_html(url) %>% html_nodes("div>section>table>tbody>tr>td")
museum=museum[seq(2,length(museum),by=5)]
length(museum)
ex=html_nodes(museum,"sup>a")
allNameLinks = html_nodes(museum,"a")
Links=allNameLinks[!(allNameLinks %in% ex)] %>% html_attr("href")
Links= Links[!duplicated(Links)]
Links = data.frame(Links=paste(c("https://ru.m.wikipedia.org/"),Links,sep=""))
print(Links)
#Ссылки на картинки
getPictLink = function(x){
if(length(html_nodes(x,"span>a"))>0){
link = (html_nodes(x,"span>a") %>% html_attr("href"))
return(paste(c("https://ru.m.wikipedia.org/"),link,sep=""))
}
else{
return(NA)
}
}
pictures = read_html(url) %>% html_nodes("div>section>table>tbody>tr>td")
pictures= pictures[seq(4,length(pictures),by=5)]
pictures= sapply(pictures,getPictLink)
pictures = data.frame(PictureLink=pictures)
print(pictures)
result = cbind(data,pictures) %>% cbind(Links)
result
View(result)
a=2
a**2
a=2
if(a>2&&a<1){
print(2)
}
a=2
if(a>2 and a<1){
a=TRUE
if(a):
a=TRUE
if a:
a=TRUE
if a==TRUE:
a=TRUE
if a>1:
a=TRUE
if (a>1):
a=TRUE
if (a>1){
print(1)
}
data = read.csv('heart.csv')
data = read.csv('lab6/heart.csv')
data
data = read.csv('lab6/heart.csv')
o2_sat=read.csv('lab6/o2Saturation.csv')
data=cbind(data,o2_sat)
o2_sat
data = data.frame(read.csv('lab6/heart.csv'))
data
means = apply(data,1,mean)
means
means = apply(data,0,mean)
means = apply(data,2,mean)
means
medians = apply(data,2,median)
medians
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
modas = apply(data,2,getmode)
modas
variances = apply(data,2,var)
variansces
variances = apply(data,2,var)
variances
sds = apply(data,2,sd)
sds
boxplot(data)
par(14)
for(i in length(data)){
boxplot(data[,i])
}
par(mfrow=(4,4))
par(mfrow=c(4,4))
for(i in length(data)){
boxplot(data[,i])
}
par(mfrow=c(4,4))
for(i in length(colnames(data))){
boxplot(data[,i])
}
colnames(data)
length(colnames(data))
boxplot(data[,i])
for(i in length(colnames(data))){
boxplot(data[,i])
}
par(mfrow=c(4,4))
for(i in range(length(colnames(data)))){
boxplot(data[,i])
}
par(mfrow=c(4,4))
for(i in c(length(colnames(data)))){
boxplot(data[,i])
}
par(mfrow=c(4,4))
for(i in 1:(length(colnames(data)))){
boxplot(data[,i])
}
par(mfrow=c(4,4))
for(i in 1:(length(colnames(data)))){
boxplot(data[,i],main=colnames(data)[i])
}
quartilies = apply(data,2,quantile(probs=c(0,0.25,0.5,0.75,1)))
quartilies = apply(data,2,quantile)
quartilies
maxs = apply(data,2,maxs)
maxs = apply(data,2,max)
maxs
mins = apply(data,2,min)
mins
par(mfrow=c(4,4))
for(i in 1:(length(colnames(data)))){
hist(data[,i],main=colnames(data)[i])
}
par(mfrow=c(4,4))
for(i in 1:(length(colnames(data)))){
hist(data[,i],xlab='count',main=colnames(data)[i])
}
par(mfrow=c(4,4))
for(i in 1:(length(colnames(data)))){
hist(data[,i],xlab='values',main=colnames(data)[i],col=rainbow(unique(data[,i])))
}
(unique(data[,i]))
(unique(data[,1]))
par(mfrow=c(4,4))
for(i in 1:(length(colnames(data)))){
hist(data[,i],xlab='values',main=colnames(data)[i],col=rainbow(unique(data[,i])))
print((unique(data[,1])))
}
par(mfrow=c(4,4))
for(i in 1:(length(colnames(data)))){
hist(data[,i],xlab='values',main=colnames(data)[i],col=rainbow(unique(data[,i])))
print((unique(data[,i])))
}
par(mfrow=c(4,4))
for(i in 1:(length(colnames(data)))){
hist(data[,i],xlab='values',main=colnames(data)[i],col=rainbow(length(unique(data[,i]))))
}
source('desc_analysis.R')
source('lab6/desc_analysis.R')
data_scaled = scale(data,center=mins,scale=maxs-mins)
data_scaled
data
data_scaled
data
data_scaled = scale(data)
data_scaled
install.packages("BBmisc")
data_sc_norm = normalize(data_scaled,method="range",range=c(0,1))
library(BBmisc)
data_sc_norm = normalize(data_scaled,method="range",range=c(0,1))
data_sc_norm
data_scaled = scale(data,center=mins,scale=maxs-mins)
data_scaled
data_sc_norm
data_scaled = scale(data,center=mins,scale=maxs-mins)
data_scaled
data
library(BBmisc)
data_sc_norm = normalize(data_scaled,method="range",range=c(0,1))
data_sc_norm
install.packages("factoextra")
fviz_nbclust(data_sc_norm[,-1], kmeans, method = "wss")
library (factoextra)
library (cluster)
fviz_nbclust(data_sc_norm[,-1], kmeans, method = "wss")
rm(list=ls())
data_scaled = scale(data,center=mins,scale=maxs-mins)
source('lab6/desc_analysis.R')
data_scaled = scale(data,center=mins,scale=maxs-mins)
data_scaled
library (factoextra)
library (cluster)
fviz_nbclust(data_sc_norm[,-1], kmeans, method = "wss")
fviz_nbclust(data_scaled[,-1], kmeans, method = "wss")
rm(list=ls())
source('lab6/desc_analysis.R')
data_scaled = scale(data,center=TRUE,scale=TRUE)
library(BBmisc)
data_sc_norm = normalize(data_scaled,method="range",range=c(0,1))
data_sc_norm
library (factoextra)
library (cluster)
fviz_nbclust(data_scaled[,-1], kmeans, method = "wss")
rm(list=ls())
source('lab6/desc_analysis.R')
data_scaled = scale(data,center=mins,scale=maxs-mins)
data_scaled
data
library(BBmisc)
data_sc_norm = normalize(data_scaled,method="range",range=c(0,1))
data_sc_norm
library (factoextra)
library (cluster)
fviz_nbclust(data_scaled[,-1], kmeans, method = "wss")
pair(c(2,2))
par(mfrow=c(2,2))
fviz_nbclust(data_scaled[,-1], kmeans, method = "wss")
par(mfrow=c(2,2))
#Построения локтя
library (factoextra)
library (cluster)
fviz_nbclust(data_scaled[,-1], kmeans, method = "wss")
par(mfrow=c(2,2))
#Построения локтя
library (factoextra)
library (cluster)
fviz_nbclust(data_scaled[,-1], kmeans, method = "wss")
fviz_nbclust(data_scaled[,-1], kmeans, method = "silhouette") +
labs(subtitle = "Silhouette method")
#Построили метод силуэта
fviz_nbclust(data_sc_norm[,-1], kmeans, method = "silhouette") +
labs(subtitle = "Silhouette method")
fviz_nbclust( data, kmeans, method = "wss")
#посчитать статистику разрыва, базирующуюся на числе кластеров K.max =5:
gap_stat <- clusGap(data_sc_norm, FUN = kmeans, nstart = 5,K.max =5, B = 5)
#plot number of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
fviz_nbclust( data, kmeans, method = "wss")
#посчитать статистику разрыва, базирующуюся на числе кластеров K.max =5:
gap_stat <- clusGap(data_sc_norm, FUN = kmeans, nstart = 5,K.max =10, B = 5)
#plot number of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
fviz_nbclust( data, kmeans, method = "wss")
gap_stat <- clusGap(data_sc_norm, FUN = kmeans, nstart = 5,K.max =10, B = 10)
#plot number of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
fviz_nbclust( data[-1], kmeans, method = "wss")
gap_stat <- clusGap(data_sc_norm, FUN = kmeans, nstart = 5,K.max =10, B = 10)
#plot number of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
fviz_nbclust( data, kmeans, method = "wss")
gap_stat <- clusGap(data_sc_norm[,-1], FUN = kmeans, nstart = 5,K.max =10, B = 10)
#plot number of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
fviz_nbclust(data_sc_norm[,-length(data_sc_norm)], kmeans, method = "wss")
data_sc_norm[,-length(data_sc_norm)]
data_sc_norm[,-(length(data_sc_norm)-1)]
data_sc_norm[,-(length(data_sc_norm))]
data_sc_norm[,-(length(colnames(data_sc_norm)))]
library (factoextra)
library (cluster)
fviz_nbclust(data_sc_norm[,-(length(colnames(data_sc_norm)))], kmeans, method = "wss")
fviz_nbclust(data_sc_norm[,-(length(colnames(data_sc_norm)))], kmeans, method = "silhouette") +
labs(subtitle = "Silhouette method")
fviz_nbclust( data, kmeans, method = "wss")
gap_stat <- clusGap(data_sc_norm[,-(length(colnames(data_sc_norm)))], FUN = kmeans, nstart = 5,K.max =10, B = 10)
#plot number of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
fviz_nbclust( data, kmeans, method = "wss")
gap_stat <- clusGap(data_sc_norm[,-(length(colnames(data_sc_norm)))], FUN = kmeans, nstart = 5,K.max =13, B = 10)
#plot number of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
fviz_nbclust( data, kmeans, method = "wss")
gap_stat <- clusGap(data_sc_norm[,-(length(colnames(data_sc_norm)))], FUN = kmeans, nstart = 5,K.max =13, B = 5)
#plot number of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
#Алгоритм на основе консенсуса
install.packages('parameters')
library(parameters)
n_clust <- n_clusters(data_sc_norm[,-(length(colnames(data_sc_norm)))],
package = c("easystats", "NbClust", "mclust"),
standardize = FALSE)
n_clust <- n_clusters(data_sc_norm[,-(length(colnames(data_sc_norm)))],
package = c("easystats", "NbClust", "mclust"),
standardize = FALSE)
data_sc_norm[,-(length(colnames(data_sc_norm)))]
n_clust <- n_clusters(data.frame(data_sc_norm[,-(length(colnames(data_sc_norm)))]),
package = c("easystats", "NbClust", "mclust"),
standardize = FALSE)
library(parameters)
n_clust <- n_clusters(data.frame(data_sc_norm[,-(length(colnames(data_sc_norm)))]),
package = c("easystats", "NbClust", "mclust"),
standardize = FALSE)
y
n_clust <- n_clusters(data.frame(data_sc_norm[,-(length(colnames(data_sc_norm)))]),
package = c("easystats", "NbClust", "mclust"),
standardize = FALSE)
library(parameters)
n_clust <- n_clusters(data.frame(data_sc_norm[,-(length(colnames(data_sc_norm)))]),
package = c("easystats", "NbClust", "mclust"),
standardize = FALSE)
n_clust
plot(n_clust)
n_clust <- n_clusters(data.frame(data_sc_norm[,-(length(colnames(data_sc_norm)))]),
package = c("easystats", "NbClust", "mclust"),
standardize = FALSE)
n_clust
plot(n_clust)
n_clust <- n_clusters(data.frame(data_sc_norm[,-(length(colnames(data_sc_norm)))]),
package = c("easystats", "NbClust", "mclust"),
standardize = TRUE)
n_clust
plot(n_clust)
dist.datas=dist(data_sc_norm[,-(length(colnames(data_sc_norm)))])
clust.datas=hclust(dist.datas,'ward.D')
dist.datas=dist(data_sc_norm[,-(length(colnames(data_sc_norm)))])
labels_datas=data_sc_norm[,(length(colnames(data_sc_norm)))]
clust.datas=hclust(dist.datas,'ward.D')
plot(clust.datas,labels_datas,cex=0.5)
rect.hclust(clist.datas,k=2,border="red")
dist.datas=dist(data_sc_norm[,-(length(colnames(data_sc_norm)))])
labels_datas=data_sc_norm[,(length(colnames(data_sc_norm)))]
clust.datas=hclust(dist.datas,'ward.D')
plot(clust.datas,labels_datas,cex=0.5)
rect.hclust(clist.datas,k=2,border="red")
dist.datas=dist(data_sc_norm[,-(length(colnames(data_sc_norm)))])
labels_datas=data_sc_norm[,(length(colnames(data_sc_norm)))]
clust.datas=hclust(dist.datas,'ward.D')
plot(clust.datas,labels_datas,cex=0.5)
rect.hclust(clist.datas,k=4,border="red")
dist.datas=dist(data_sc_norm[,-(length(colnames(data_sc_norm)))])
labels_datas=data_sc_norm[,(length(colnames(data_sc_norm)))]
clust.datas=hclust(dist.datas,'ward.D')
plot(clust.datas,labels_datas,cex=0.5)
rect.hclust(clust.datas,k=4,border="red")
rect.hclust(clust.datas,k=2,border="red")
dist.datas=dist(data_sc_norm[,-(length(colnames(data_sc_norm)))])
labels_datas=data_sc_norm[,(length(colnames(data_sc_norm)))]
clust.datas=hclust(dist.datas,'ward.D')
plot(clust.datas,labels_datas,cex=0.5)
rect.hclust(clust.datas,k=2,border="red")
g1=data_sc_norm[groups==1]
groups <- cutree(clust.datas, k=2)
g1=data_sc_norm[groups==1]
g1
groups <- cutree(clust.datas, k=2)
g1=data_sc_norm[groups==1,]
g1
g2=data_sc_norm[groups==2,]
g2
dist.datas=dist(data_sc_norm[,-(length(colnames(data_sc_norm)))])
labels_datas=data_sc_norm[,(length(colnames(data_sc_norm)))]
clust.datas=hclust(dist.datas,'ward.D')
plot(clust.datas,labels_datas,cex=0.5)
rect.hclust(clust.datas,k=4,border="red")
groups <- cutree(clust.datas, k=4)
g1=data_sc_norm[groups==1,]
g1
g2=data_sc_norm[groups==2,]
g2
getOption("max.print")
setOption("max.print",2000)
Option("max.print",2000)
