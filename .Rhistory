# Корреляция Роста ввп и прироста населения
colnames(data)[14]
cor.test(data[,2],data[,14])
data_t_col
plotcorr(cor(data_t,method="spearman",use="pairwise.complete.obs"))
cor(data[,2],data[,14],method="kendall")
cor(data[,2],data[,14],method="spearman")
plot(data[,2],data[,14])
plot(data[,2],data[,14]type="o")
plot(data[,2],data[,14],type="o")
plot(sort(data[,2]),data[,14],type="o")
plot(sort(data[,2]),data[,14],type="o",xlab="GDP growth",ylab="Population growth")
plot(sort(data[,14]),data[,14],type="o",ylab="GDP growth",xlab="Population growth")
cor.test(data[,2],data[,14],method="spearman")
cor.test(data[,2],data[,14],method="kendall")
# Прирост населения на динамику безработицы
cor(data[,14],data[,17])
cor(data[,14],data[,17],method="spearman")
cor(data[,14],data[,17],method="kendall")
cor.test(data[,14],data[,17])
cor.test(data[,14],data[,17],method="spearman")
cor.test(data[,14],data[,17],method="kendall")
plot(sort(data[,14]),data[,17],type="o",ylab="Unemployment",xlab="Population growth")
plot(sort(data[,17]),data[,14],type="o",xlab="Unemployment",ylab="Population growth")
cor(data[,12],data[,13])
cor(data[,12],data[,13],method="spearman")
cor(data[,12],data[,13],method="kendall")
cor(data[,12],data[,13],use="pairwise.complete.obs")
cor(data[,12],data[,13],method="spearman",use="pairwise.complete.obs")
cor(data[,12],data[,13],method="kendall",use="pairwise.complete.obs")
cor.test(data[,12],data[,13],use="pairwise.complete.obs")
cor.test(data[,12],data[,13],method="spearman",use="pairwise.complete.obs")
cor.test(data[,12],data[,13],method="kendall",use="pairwise.complete.obs")
plot(sort(data[,12]),data[,13],type="o",ylab="Life expectancy",xlab="Health expenditure")
data_t = data[is.na(data[,12])==FALSE && is.na(data[,13])==False]
data_t = data[is.na(data[,12])==FALSE && is.na(data[,13])==FALSE]
data_t = data[(is.na(data[,12])==FALSE) && (is.na(data[,13])==FALSE)]
data_t = data[(is.na(data[,12])==FALSE) && (is.na(data[,13])==FALSE),]
data_t = data[!(is.na(data[,12])==FALSE) | !(is.na(data[,13])==FALSE),]
data_t
plot(sort(data_t[,12]),data_t[,13],type="o",ylab="Life expectancy",xlab="Health expenditure")
data_t[,12]
data_t = data[!is.na(data[,12]) | !is.na(data[,13])]
data_t[,12]
data_t
data_t = data[!is.na(data[,12]) | !is.na(data[,13]),]
data_t[,12]
data_t = data[!is.na(data[,12]) & !is.na(data[,13]),]
data_t[,12]
plot(sort(data_t[,12]),data_t[,13],type="o",ylab="Life expectancy",xlab="Health expenditure")
# 3 Расходы на медицину на среднюю продолжительность жизни
cor(data[,12],data[,13],use="pairwise.complete.obs")
cor(data[,12],data[,13],method="spearman",use="pairwise.complete.obs")
cor(data[,12],data[,13],method="kendall",use="pairwise.complete.obs")
cor.test(data[,12],data[,13],use="pairwise.complete.obs")
cor.test(data[,12],data[,13],method="spearman",use="pairwise.complete.obs")
cor.test(data[,12],data[,13],method="kendall",use="pairwise.complete.obs")
plot(sort(data_t[,12]),data_t[,13],type="o",ylab="Life expectancy",xlab="Health expenditure")
plot(sort(data_t[,13]),data_t[,12],type="o",xlab="Life expectancy",ylab="Health expenditure")
plotcorr(data[,c(12,13)],use="pairwise.complete.obs")
plotcorr(cor(data[,c(12,13)],use="pairwise.complete.obs"))
plotcorr(cor(data[,c(12,18)],use="pairwise.complete.obs"))
# 3 Расходы на медицину на смертность
cor(data[,12],data[,18],use="pairwise.complete.obs")
cor(data[,12],data[,18],method="spearman",use="pairwise.complete.obs")
cor(data[,12],data[,18],method="kendall",use="pairwise.complete.obs")
cor.test(data[,12],data[,18],use="pairwise.complete.obs")
cor.test(data[,12],data[,18],method="spearman",use="pairwise.complete.obs")
cor.test(data[,12],data[,18],method="kendall",use="pairwise.complete.obs")
plotcorr(cor(data[,c(19,17)],use="pairwise.complete.obs"))
# 4 Прирост населения с высшим образованием на экспорт товаров
cor(data[,19],data[,17],use="pairwise.complete.obs")
cor(data[,19],data[,17],method="spearman",use="pairwise.complete.obs")
cor(data[,19],data[,17],method="kendall",use="pairwise.complete.obs")
cor.test(data[,19],data[,17],use="pairwise.complete.obs")
cor.test(data[,19],data[,17],method="spearman",use="pairwise.complete.obs")
cor.test(data[,19],data[,17],method="kendall",use="pairwise.complete.obs")
data_t = data[!is.na(data[,19]) & !is.na(data[,17]),]
plot(sort(data_t[,19]),data_t[,17],type="o",ylab="Export",xlab="Бакалавры")
plot(sort(data_t[,17]),data_t[,19],type="o",xlab="Export",ylab="Бакалавры")
par(mfrow=c(2,1))
plot(sort(data_t[,19]),data_t[,17],type="o",ylab="Export",xlab="Бакалавры")
plot(sort(data_t[,17]),data_t[,19],type="o",xlab="Export",ylab="Бакалавры")
plotcorr(cor(data[,c(19,22)],use="pairwise.complete.obs"))
plotcorr(cor(data[,c(19,22)],use="pairwise.complete.obs"))
# 4 Прирост населения с высшим образованием на прирост высокотехнологического производства
cor(data[,19],data[,22],use="pairwise.complete.obs")
cor(data[,19],data[,22],method="spearman",use="pairwise.complete.obs")
cor(data[,19],data[,22],method="kendall",use="pairwise.complete.obs")
data_t = data[!is.na(data[,19]) & !is.na(data[,22]),]
par(mfrow=c(2,1))
plot(sort(data_t[,19]),data_t[,22],type="o",ylab="Hightech production",xlab="Бакалавры")
plot(sort(data_t[,22]),data_t[,19],type="o",xlab="Hightech production",ylab="Бакалавры")
plotcorr(cor(data[,c(15,20)],use="pairwise.complete.obs"))
plotcorr(cor(data[,c(15,20)],use="pairwise.complete.obs"))
# 4 Расходы на образование на кумулятивный прирост балаквров среди женщин
cor(data[,15],data[,20],use="pairwise.complete.obs")
cor(data[,15],data[,20],method="spearman",use="pairwise.complete.obs")
cor(data[,15],data[,20],method="kendall",use="pairwise.complete.obs")
cor.test(data[,15],data[,20],use="pairwise.complete.obs")
cor.test(data[,15],data[,20],method="spearman",use="pairwise.complete.obs")
cor.test(data[,15],data[,20],method="kendall",use="pairwise.complete.obs")
data_t = data[!is.na(data[,15]) & !is.na(data[,20]),]
par(mfrow=c(2,1))
plot(sort(data_t[,15]),data_t[,20],type="o",ylab="Education expenditure",xlab="Бакалавры среди женщин")
plot(sort(data_t[,20]),data_t[,15],type="o",xlab="Education expenditure",ylab="Бакалавры среди женщин")
par(mfrow=c(2,1))
plot(sort(data_t[,15]),data_t[,20],type="o",xlab="Education expenditure",ylab="Бакалавры среди женщин")
plot(sort(data_t[,20]),data_t[,15],type="o",ylab="Education expenditure",xlab="Бакалавры среди женщин")
plot(data_t[,15],data_t[,20],type="o",xlab="Education expenditure",ylab="Бакалавры среди женщин")
plot(data_t[,15],data_t[,20],type="p",xlab="Education expenditure",ylab="Бакалавры среди женщин")
plot(data_t[,20],data_t[,15],type="p",ylab="Education expenditure",xlab="Бакалавры среди женщин")
plot(data_t[,15],data_t[,20],type="p",xlab="Education expenditure",ylab="Бакалавры среди женщин")
plot(data_t[,19],data_t[,22],type="p",ylab="Hightech production",xlab="Бакалавры")
plotcorr(cor(data[,c(19,22)],use="pairwise.complete.obs"))
plot(data_t[,22],data_t[,19],type="p",xlab="Hightech production",ylab="Бакалавры")
data_t = data[!is.na(data[,15]) & !is.na(data[,20]),]
data_t = data_t[order(data_t),]
data_t = data_t[order(data_t[,15]),]
par(mfrow=c(2,1))
plot(data_t[,15],data_t[,20],type="o",xlab="Education expenditure",ylab="Бакалавры среди женщин")
plot(data_t[,20],data_t[,15],type="o",ylab="Education expenditure",xlab="Бакалавры среди женщин")
data_t = data_t[order(data_t[,20]),]
plot(data_t[,20],data_t[,15],type="o",ylab="Education expenditure",xlab="Бакалавры среди женщин")
# 6 Прирост бакалвров на количество научных статей
cor(data[,19],data[,23],use="pairwise.complete.obs")
# 6 Прирост бакалвров на количество научных статей
cor(data[,19],data[,22],use="pairwise.complete.obs")
cor(data[,19],data[,22],method="spearman",use="pairwise.complete.obs")
cor(data[,19],data[,22],method="kendall",use="pairwise.complete.obs")
cor.test(data[,19],data[,22],use="pairwise.complete.obs")
data_t = data[!is.na(data[,19]) & !is.na(data[,22]),]
data_t = data_t[order(data_t[,19]),]
par(mfrow=c(2,1))
plot(data_t[,19],data_t[,22],type="o",xlab="Прирост бакалавров",ylab="Количество научных статей")
data_t = data_t[order(data_t[,20]),]
plot(data_t[,22],data_t[,19],type="o",ylab="Прирост бакалавров",xlab="Количество научных статей")
data_t = data_t[order(data_t[,22]),]
plot(data_t[,22],data_t[,19],type="o",ylab="Прирост бакалавров",xlab="Количество научных статей")
plotcorr(cor(data[,c(19,22)],use="pairwise.complete.obs"))
library(car)
scatterplotMatrix(data, spread=FALSE, lty.smooth=2,
main="Матрица диаграмм рассеяния")
data_t = data[, colSums(is.na(data)) < nrow(data)]
scatterplotMatrix(data_t, spread=FALSE, lty.smooth=2,
main="Матрица диаграмм рассеяния")
data_t = data[, colSums(is.na(data)) < nrow(data)]
scatterplotMatrix(data_t, spread=FALSE, lty.smooth=2,
main="Матрица диаграмм рассеяния")
data_t = data[, colSums(is.na(data)) < nrow(data)]
scatterplotMatrix(data_t, spread=FALSE, lty.smooth=2,
main="Матрица диаграмм рассеяния")
scatterplotMatrix(data_t,main="Матрица диаграмм рассеяния")
scatterplotMatrix(data_t,main="Матрица диаграмм рассеяния")
data_t
plotcorr(cor(data,use="pairwise.complete.obs"))
plotcorr(cor(data_t,use="pairwise.complete.obs"))
data_t = data[, colSums(is.na(data)) < nrow(data)]
data_t
colnames(data_t)=1:length(data_t_col)
scatterplotMatrix(data_t,main="Матрица диаграмм рассеяния")
plotcorr(cor(data_t,use="pairwise.complete.obs"))
data_t = data[, colSums(is.na(data)) < nrow(data)]
data_t
colnames(data_t)
colnames(data_t)=1:length(data_t_col)
plotcorr(cor(data_t,use="pairwise.complete.obs"))
# 8
data_t = data[, colSums(is.na(data)) < nrow(data)]
data_t
colnames(data_t)
fit = lm(data_t[,1]~data_t[,7]+data_t[,10]+data_t[,13])
fit
fit = lm(data_t[,1]~data_t[,7]+data_t[,10]+data_t[,13],data=data_t)
fit = lm(data_t[,1]~data_t[,7]+data_t[,10]+data_t[,13],data=as.data.frame(data_t))
fit
summary(fit)
residuals(fit)
fit = lm(data_t[,1]~data_t[,7]+data_t[,10]+data_t[,13],data=as.data.frame(data_t[1989:2016]))
fit
summary(fit)
residuals(fit)
new_results = predict(fit,data_t[2017:2019])
new_results = predict(fit,newdata=data_t[2017:2019])
new_results = predict(fit,newdata=as.data.frame(data_t[2017:2019]))
fit = lm(data_t[,1]~data_t[,7]+data_t[,10]+data_t[,13],data=as.data.frame(data_t[1989:2016,]))
data_t
data_t[1989,]
data_t[1,]
length(data_t)
length(rownames(data_t))
fit = lm(data_t[,1]~data_t[,7]+data_t[,10]+data_t[,13],data=as.data.frame(data_t[1:28,]))
new_results = predict(fit,newdata=as.data.frame(data_t[29:30,]))
data_t[29:30,]
as.data.frame(data_t[29:30,])
View(data_t)
new_results = predict(fit,newdata=as.data.frame(data_t[29:30,]))
d = as.data.frame(data_t[29:30,])
View(d)
new_results = predict(fit,newdata=d)
new_results
residuals(fit)
fit = lm(data_t[,1]~data_t[,7]+data_t[,10]+data_t[,13],data=as.data.frame(data_t[1:28,]))
fit
data_fit = as.data.frame(data_t[1:28,])
fit = lm(data_tfi[,1]~data_fit[,7]+data_fit[,10]+data_fit[,13])
fit = lm(data_fit[,1]~data_fit[,7]+data_fit[,10]+data_fit[,13])
fit
summary(fit)
fit
residuals(fit)
new_results = predict(fit,newdata=d)
d = as.data.frame(data_t[29:30,])
new_results
d = as.data.frame(data_t[29:30,])
d
View(d)
d = as.data.frame(data_t[29:30,c(7,10,13)])
new_results = predict(fit,newdata=d)
new_results
View(d)
data_t = data[, colSums(is.na(data)) < nrow(data)]
data_fit = as.data.frame(data_t[1:28,])
d = as.data.frame(data_t[29:30,c(7,10,13)])
d
fit = lm(data_fit[,1]~data_fit[,7]+data_fit[,10]+data_fit[,13])
fit
summary(fit)
residuals(fit)
new_results = predict(fit,newdata=d)
new_results
colnames(data_fit)
data_fit = as.data.frame(data_t[1:28,])
colnames(data_fit)
colnames(data_fit)[1] = "GDP"
colnames(data_fit)[7] = "IoFaS"
colnames(data_fit)[10] = "LExp"
colnames(data_fit)[13] = "GIm
fit = lm(GDP~IoFas+LExp+GIm,data=data_fit)
fit
summary(fit)
residuals(fit)
colnames(data_fit)
colnames(data_fit)
g<-graph.lattice(length=10,dim=1,nei=5, circular = TRUE)
library(igraph)
g1<-graph(c(1,2,1,3,1,4,2,3,2,4, 3,4, 4,5, 5,6, 2,6),n=6)
g1
E(g1, P=NULL, path=NULL, directed=TRUE)
g<-graph.full(n=10, directed = FALSE, loops = FALSE)
g
edges <- c(1,2, 3,2, 2,4)
g2<-graph(edges, n=max(edges), directed=TRUE)
plot(g2)
#Вывод матрицы смежности
g2[]
#Проверка связности вершин
are_adjacent(g1,5,6)
#Матрица достижимости
distMatrix <- distances(g1, v=V(g1), to=V(g1), weights=NA)
distMatrix
g<-graph.empty()+vertices(letters[1:10],color="red") #Команда 1
g<-g+vertices(letters[11:20],color="blue") #Команда 2
g<-g+edges(sample(V(g),30,replace=TRUE),color="green") #Команда 3
plot(g, edge.arrow.size=.2,vertex.size=20) #Команда 4
edges <- c(1,2, 3,2, 2,4)
g<-graph(edges, n=max(edges), directed=TRUE)
vcount(g)
ecount(g)
neighbors(g, V(g)[1], mode = 1)
incident(g,V(g)[2], mode=c("all", "out", "in", "total"))
is.directed(g)
are.connected(g, V(g)[1], V(g)[3])
get.edgelist(g)
advice_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-Advice.txt')
g<-graph.lattice(length=10,dim=1,nei=5, circular = TRUE)
plot(g,vertex.size=2,vertex.label=NA,layout=layout.kamada.kawai)
g<-graph.lattice(length=10,dim=1,nei=2, circular = TRUE)
plot(g,vertex.size=2,vertex.label=NA,layout=layout.kamada.kawai)
diameter(g1)
g1.all_simple<-all_simple_paths(g1, 2, 6)
g1.all_simple
all_shortest_paths(g1, 1, to = V(g1), mode = c("out", "all", "in"),weights = NULL)
vertext_number = sample(18:(8/10+5)**2+5*8,1)
vertext_number
vertext_number = sample(18:(8/10+5)**2+5*8,1)
vertext_number
g<-graph.star(n=vertext_number, mode="in")
plot(g)
vcount(g)
ecount(g)
g[]
options(max.print= 1000)
g[]
options(max.print = 100000,width=50)
g[]
#2
g<-graph.empty()+vertices(letters[1:vertext_number],color="yellow")
plot(g)
library(igraph)
#1
vertext_number = sample(18:(8/10+5)**2+5*8,1)
vertext_number
g<-graph.star(n=vertext_number, mode="in")
plot(g)
vcount(g)
ecount(g)
options(max.print = 100000,width=50)
g[]
g1<-graph.empty()+vertices(letters[1:vertext_number],color="yellow")
plot(g1)
g1<-graph.empty()+vertices(letters[1:vertext_number],color="yellow")
g1<-g1+edges(sample(V(g1),18,replace=TRUE),color="red")
plot(g1)
g1<-g1+edges(sample(V(g1),18,replace=TRUE),color="red")
plot(g1)
g1<-g1+edges(sample(V(g1),18,replace=TRUE),color="red")
plot(g1)
E(g1)
V(g1)
#2
g1<-graph.empty()+vertices(1:vertext_number,color="yellow")
g1<-g1+edges(sample(V(g1),18,replace=TRUE),color="red")
plot(g1)
V(g1)
E(g1)
g1<-graph.empty()+vertices(1:vertext_number,color="yellow")
g1<-g1+edges(sample(V(g1),18,replace=TRUE),color="red")
plot(g1)
g1<-graph.empty()+vertices(1:vertext_number,color="yellow")
g1<-g1+edges(sample(V(g1),18,replace=TRUE),color="red")
plot(g1)
g1<-graph.empty()+vertices(1:vertext_number,color="yellow")
g1<-g1+edges(sample(V(g1),18,replace=TRUE),color="red")
plot(g1)
E(g1)
g1<-graph.empty()+vertices(1:vertext_number,color="yellow")
g1<-g1+edges(sample(V(g1),18,replace=TRUE),color="red")
g1<-g1+edges(sample(V(g1),80,replace=TRUE),color="blue
plot(g1)
plot(g1)
E(g1)
library(igraph)
#1
vertext_number = sample(18:(8/10+5)**2+5*8,1)
vertext_number
g<-graph.star(n=vertext_number, mode="in")
plot(g)
vcount(g)
ecount(g)
options(max.print = 100000,width=50)
g[]
#2
g1<-graph.empty()+vertices(1:vertext_number,color="yellow")
g1<-g1+edges(sample(V(g1),18,replace=TRUE),color="red")
g1<-g1+edges(sample(V(g1),80,replace=TRUE),color="blue")
plot(g1)
E(g1)
V(g1)
E(g1,P=C(49,12))
E(g1,P=c(49,12))
E(g1,P=c(12,49))
E(g1,P=c(1,49))
E(g1,P=c(49,1))
g1[]
get.adjacency(g1)
as_adjacency_matrix(g1)
vert_to_check %in% V(g1)
vert_to_check = c(2*8+23,2*8+20,2*8+12,8+15,2*8-1,8+8,2*8,2*8+1,8+7,8+13)
vert_to_check
vert_to_check %in% V(g1)
g1 <- g1+edges(vert_to_check)
g1 <- g1+edges(vert_to_check,color="black")
plot(g1)
E(g1)
#Все соседи
neighbors(g1,8)
E(g1)[8]
get.edgelist(g1)
incident(g,V(g1)[8], mode=c("all", "out", "in", "total"))
incident(g1,V(8), mode=c("all", "out", "in", "total"))
incident(g1,V(g1)[8], mode=c("all", "out", "in", "total"))
incident(g1,8, mode=c("all", "out", "in", "total"))
incident(g1,8)
E(g1)
#Ребра инциндентные вершине
incident(g1,23 mode=c("all", "out", "in", "total"))
#Ребра инциндентные вершине
incident(g1,23, mode=c("all", "out", "in", "total"))
#Ребра инциндентные вершине
incident(g1,8, mode=c("all", "out", "in", "total"))
are.connected(g1, 18,20)
are_adjacent(g1, 18,20)
are_adjacent(g1, 23,32)
are_adjacent(g1, 32,23)
are_adjacent(g1, 18,20,mode=c("all", "out", "in", "total"))
E(g1)
g1[]
#Проверка соединения
are_adjacent(g1, 18,20)| are_adjacent(g1, 20,18)
deg <- degree(g1, mode="all")
deg
max(deg)
max_degree_vertex = V(g1)[which.max(deg)]
max_degree_vertex
g1<-g1+vertices(vertext_number+1,color="green")
g1<-g1+edges(c(vertext_number+1,max_degree_vertex),color="green")
plot(g1)
vertex_number = vertex_number+1
vertext_number = vertext_number+1
#Присваиваем имена
"m"+c(1:vertext_number)
#Присваиваем имена
paste(rep("m",vertext_number),1:vertext_number)
#Присваиваем имена
paste(rep("m",vertext_number),1:vertext_number,sep="")
labels = paste(rep("m",vertext_number),1:vertext_number,sep="")
set_vertex_attr(g1, "label", value = labels)
plot(g1)
labels = paste(rep("m",vertext_number),1:vertext_number,sep="")
set_vertex_attr(g1, "label", value = labels)
plot(g1)
labels = paste(rep("m",vertext_number),1:vertext_number,sep="")
set_vertex_attr(g1, "label", value = labels)
plot(g1)
g1
V(g1)
V(g1)$name = labels
g1
plot(g1)
g1[]
selected_vertices <- V(g1)[degree(g1) > 2 & degree(g1) < 5]
selected_vertices
coords <- layout_(g1, as_star())
plot(g1, layout = coords)
coords <- layout_(g1, in_circle())
plot(g1, layout = coords)
coords <- layout_(g1, in_tree())
coords <- layout_(g1, as_tree())
plot(g1, layout = coords)
coords <- layout_(g1, lattice())
coords <- layout.lattice(g1)
layout <- layout.lattice(g)
library(igraph)
layout <- layout.lattice(g)
install.packages("igraph")
library(igraph)
layout <- layout.lattice(g1)
layout <- lattice(g1)
library(igraph)
layout <- lattice(g1)
plot(g1, layout = coords)
library(igraph)
layout <- lattice(g1)
plot(g1, layout = coords)
layout <- lattice(g1)
plot(g1, layout = coords)
coords <- lattice(g1)
plot(g1, layout = coords)
coords <- igraph.lattice(g1)
coords <- layout.lattice(g1)
plot(g1, layout = layout.lattice(g1))
plot(g1, layout = lattice(g1))
lattice(g1)
plot(g1, layout = layout.fruchterman.reingold(g1))
#6
diameter(g1)
all_shortest_paths(g1, V(g1), to = V(g1), mode = c("out", "all", "in"),weights = NULL)
all_shortest_paths(g1, V(g1), to = V(g1), mode = c("out", "all", "in"),weights = NULL)
all_shortest_paths(g1, V(g1), to = V(g1),weights = NULL)
all_shortest_paths(g1, V(g1), V(g1),weights = NULL)
lapply(V(g1), f)
f = function(vert){all_shortest_paths(g1, vert, V(g1),weights = NULL)}
lapply(V(g1), f)
lapply(V(g1), f)
plot(g1,vertex.size=degree(g1, mode="all"))
g <- graph_from_edgelist(c(1, 2, 1, 3, 1, 4, 2, 5, 2, 6, 3, 5, 3, 6, 4, 5, 4, 6))
library(igraph)
g <- graph_from_edgelist(c(1, 2, 1, 3, 1, 4, 2, 5, 2, 6, 3, 5, 3, 6, 4, 5, 4, 6))
g <- graph(c(1, 2, 1, 3, 1, 4, 2, 5, 2, 6, 3, 5, 3, 6, 4, 5, 4, 6))
plot(g)
colors <- igraph::vertex_coloring(g, 2)
colors <- vertex_coloring(g, 2)
colors <- vertex_coloring(g)
library(igraph)
colors <- vertex_coloring(g)
colors <- greedy_vertex_coloring(g)
if(max(colors) == 2) {
# Создаем фактор с группами
groups <- factor(colors)
# Создаем фрейм с группами
frame <- data.frame(Group1 = which(groups == 1), Group2 = which(groups == 2))
# Выводим результат
print(frame)
print(c("Group 1" = sum(groups == 1), "Group 2" = sum(groups == 2)))
} else {
print("Graph cannot be colored with 2 colors")
}
g <- graph(c(1, 2, 1, 3, 2, 3),directed=FALSE)
plot(g)
colors <- greedy_vertex_coloring(g)
if(max(colors) == 2) {
# Создаем фактор с группами
groups <- factor(colors)
# Создаем фрейм с группами
frame <- data.frame(Group1 = which(groups == 1), Group2 = which(groups == 2))
# Выводим результат
print(frame)
print(c("Group 1" = sum(groups == 1), "Group 2" = sum(groups == 2)))
} else {
print("Graph cannot be colored with 2 colors")
}
