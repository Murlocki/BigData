labels_datas=data_sc_norm[,(length(colnames(data_sc_norm)))]
clust.datas=hclust(dist.datas,'ward.D')
plot(clust.datas,labels_datas,cex=0.5)
rect.hclust(clust.datas,k=2,border="red")
groups <- cutree(clust.datas, k=2)
options(max.print=999999)
g1=cbind(data_k[groups==1,],c(1))
colnames(g1)[14]=c('class')
g1
g2
g2=cbind(data_k[groups==2,],c(2))
data_k[groups==2,]
g2=cbind(data[groups==2,],c(2))
g2=cbind(data[groups==2,],c(2))
data[groups==2,]
groups <- cutree(clust.datas, k=5)
dist.datas=dist(data_k)
labels_datas=data_sc_norm[,(length(colnames(data_sc_norm)))]
clust.datas=hclust(dist.datas,'ward.D')
plot(clust.datas,labels_datas,cex=0.5)
rect.hclust(clust.datas,k=5,border="red")
groups <- cutree(clust.datas, k=5)
data[groups==1,]
data[groups==2,]
data[groups==3,]
data[groups==4,]
data[groups==5,]
dist.datas=dist(data_k)
labels_datas=data_sc_norm[,(length(colnames(data_sc_norm)))]
clust.datas=hclust(dist.datas,'ward.D')
plot(clust.datas,labels_datas,cex=0.5)
rect.hclust(clust.datas,k=5,border="red")
groups <- cutree(clust.datas, k=5)
data[groups==1,]
data[groups==2,]
data[groups==3,]
data[groups==4,]
data[groups==5,]
dist.datas=dist(data_k)
labels_datas=data_sc_norm[,(length(colnames(data_sc_norm)))]
clust.datas=hclust(dist.datas,'ward.D')
plot(clust.datas,labels_datas,cex=0.5)
rect.hclust(clust.datas,k=2,border="red")
groups <- cutree(clust.datas, k=2)
data[groups==1,]
data[groups==2,]
dist.datas=dist(data_k)
labels_datas=data_sc_norm[,(length(colnames(data_sc_norm)))]
clust.datas=hclust(dist.datas,'ward.D')
plot(clust.datas,labels_datas,cex=0.5)
rect.hclust(clust.datas,k=5,border="red")
groups <- cutree(clust.datas, k=5)
g1=cbind(data_k[groups==1,],c(1))
colnames(g1)[14]=c('class')
g1
g2=cbind(data_k[groups==2,],c(2))
colnames(g2)[14]=c('class')
g2
g3=cbind(data_k[groups==3,],c(3))
colnames(g3)[14]=c('class')
g3
g4=cbind(data_k[groups==4,],c(4))
colnames(g4)[14]=c('class')
g4
g5=cbind(data_k[groups==5,],c(5))
colnames(g5)[14]=c('class')
g5
layout(matrix(1:2,nrow=1,ncol=2))
df = t(t(data.frame(colMeans(g1),colMeans(g2),colMeans(g3),colMeans(g4),colMeans(g5))))
barplot(df[-14,],main='heart illnesses',col=rainbow(13),bty='n',beside=TRUE)
plot(1:2,1:2,xaxt="n",yaxt="n",main="Легенда",xlab="",ylab="")
legend("center", legend = rownames(df),cex=0.6, col=rainbow(13), lwd=10, bty = "n")
data_classes = rbind(g1,g2,g3,g4,g5)
data_classes
data_for_boxplot=cbind(data[,-14],data_classes[,14])
data_for_boxplot
layout(matrix(1:16,nrow=4,ncol=4))
for(i in 1:(length(colnames(data))-1)){
boxplot(data_for_boxplot[,i]~data_for_boxplot[,14],data=data_for_boxplot,
xlab="class",ylab=colnames(data)[i])
}
dist.datas=dist(data_k)
labels_datas=data_sc_norm[,(length(colnames(data_sc_norm)))]
clust.datas=hclust(dist.datas,'ward.D')
plot(clust.datas,labels_datas,cex=0.5)
rect.hclust(clust.datas,k=2,border="red")
groups <- cutree(clust.datas, k=2)
data[groups==1,]
data[groups==2,]
options(max.print=999999)
g1=cbind(data_k[groups==1,],c(1))
colnames(g1)[14]=c('class')
g1
g2=cbind(data_k[groups==2,],c(2))
colnames(g2)[14]=c('class')
g2
layout(matrix(1:2,nrow=1,ncol=2))
df = t(t(data.frame(colMeans(g1),colMeans(g2))))
barplot(df[-14,],main='heart illnesses',col=rainbow(13),bty='n',beside=TRUE)
plot(1:2,1:2,xaxt="n",yaxt="n",main="Легенда",xlab="",ylab="")
legend("center", legend = rownames(df),cex=0.6, col=rainbow(13), lwd=10, bty = "n")
data_classes = rbind(g1,g2)
data_classes
data_for_boxplot=cbind(data[,-14],data_classes[,14])
data_for_boxplot
layout(matrix(1:16,nrow=4,ncol=4))
for(i in 1:(length(colnames(data))-1)){
boxplot(data_for_boxplot[,i]~data_for_boxplot[,14],data=data_for_boxplot,
xlab="class",ylab=colnames(data)[i])
}
par(mfrow=c(4,4))
for(i in colnames(data)){
f=factor(data[,i])
sort(levels(f))
levels(f) = sort(levels(f))
as.numeric(f)
hist(as.numeric(f),main=i,xaxt="n")
axis(1,at=1:length(levels(f)),labels=unique(levels(f)))
}
data = data.frame(read.csv('lab7/athlete_events.csv'))
data$Height[is.na(data$Height)]=mean(data$Height[!is.na(data$Height)])
data$Weight[is.na(data$Weight)]=mean(data$Weight[!is.na(data$Weight)])
data$Age[is.na(data$Age)]=mean(data$Age[!is.na(data$Age)])
data$Medal[is.na(data$Medal)]="None"
par(mfrow=c(4,4))
for(i in colnames(data)){
f=factor(data[,i])
sort(levels(f))
levels(f) = sort(levels(f))
as.numeric(f)
hist(as.numeric(f),main=i,xaxt="n")
axis(1,at=1:length(levels(f)),labels=unique(levels(f)))
}
#Смотрим распределение
par(mfrow=c(4,4))
for(i in colnames(data)){
if(is.numeric(data[,i])){
hist(data[,i],main=i)
}
else{
f=factor(data[,i])
sort(levels(f))
levels(f) = sort(levels(f))
as.numeric(f)
hist(as.numeric(f),main=i,xaxt="n")
axis(1,at=1:length(levels(f)),labels=unique(levels(f)))
}
}
par(mfrow=c(4,4))
for(i in colnames(data)){
if(is.numeric(data[,i])){
shapiro.test(data[,i])
}
else{
f=factor(data[,i])
sort(levels(f))
levels(f) = sort(levels(f))
shapiro.test(f)
}
}
par(mfrow=c(4,4))
for(i in colnames(data)){
if(is.numeric(data[,i])){
shapiro.test(data[1:5000,i])
}
else{
f=factor(data[1:5000,i])
sort(levels(f))
levels(f) = sort(levels(f))
shapiro.test(f)
}
}
par(mfrow=c(4,4))
for(i in colnames(data)){
if(is.numeric(data[,i])){
shapiro.test(data[1:5000,i])
}
else{
f=factor(data[1:5000,i])
sort(levels(f))
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
}
}
par(mfrow=c(4,4))
for(i in colnames(data)){
if(is.numeric(data[,i])){
shapiro.test(data[1:5000,i])
}
else{
f=factor(data[1:5000,i])
sort(levels(f))
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
}
}
#Проверяем на нормальное распределение
shapiro.test(data[1:5000,"Age"])
#Проверяем на нормальное распределение
shapiro.test(data[1:5000,"Height"])
shapiro.test(data[1:5000,"Age"])
shapiro.test(data[1:5000,"Weight"])
shapiro.test(data[1:5000,"Medal"])
for(i in colnames(data)){
if(is.numeric(data[,i])){
shapiro.test(data[1:5000,i])
}
else{
f=factor(data[1:5000,i])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
}
print(data[,i])
}
f=factor(data[1:5000,i])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
for(i in colnames(data)){
if(is.numeric(data[,i])){
shapiro.test(data[1:5000,i])
}
else{
f=factor(data[1:5000,i])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
}
}
f=factor(data[1:5000,"Medal"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"Name"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
#Проверяем на нормальное распределение
shapiro.test(data[1:5000,"Height"])
shapiro.test(data[1:5000,"Age"])
shapiro.test(data[1:5000,"Weight"])
f=factor(data[1:5000,"Medal"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"Name"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"Sex"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"Team"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"NOC"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"Games"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"Season"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"City"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"Sport"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"Event"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
#Проверяем на нормальное распределение
shapiro.test(data[1:5000,"Height"])
shapiro.test(data[1:5000,"Age"])
shapiro.test(data[1:5000,"Weight"])
f=factor(data[1:5000,"Medal"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"Name"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"Sex"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"Team"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"NOC"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"Games"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"Season"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"City"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"Sport"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[1:5000,"Event"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
#Проверяем на нормальное распределение
shapiro.test(data[sample(1,nrow(data),replace=FALSE),"Height"])
#Проверяем на нормальное распределение
shapiro.test(data[sample(1:nrow(data),5000,replace=FALSE),"Height"])
sample(1:nrow(data),5000,replace=FALSE)
data[sample(1:nrow(data),5000,replace=FALSE)]
data[sample(1:nrow(data),5000,replace=FALSE),]
shapiro.test(data[sample(1:nrow(data),5000,replace=FALSE,"Age"])
shapiro.test(data[sample(1:nrow(data),5000,replace=FALSE),"Age"])
shapiro.test(data[sample(1:nrow(data),5000,replace=FALSE),"Weight"])
shapiro.test(data[sample(1:nrow(data),5000,replace=FALSE),"Height"])
shapiro.test(data[sample(1:nrow(data),5000,replace=FALSE),"Age"])
shapiro.test(data[sample(1:nrow(data),5000,replace=FALSE),"Weight"])
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Medal"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Name"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Sex"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Team"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"NOC"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Games"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Season"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"City"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Sport"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Event"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
shapiro.test(data[sample(1:nrow(data),5000,replace=FALSE),"Height"])
shapiro.test(data[sample(1:nrow(data),5000,replace=FALSE),"Age"])
shapiro.test(data[sample(1:nrow(data),5000,replace=FALSE),"Weight"])
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Medal"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Name"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Sex"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Team"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"NOC"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Games"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Season"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"City"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Sport"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Event"])
levels(f) = sort(levels(f))
shapiro.test(as.numeric(f))
hist(data$Weight,main=i,xaxt="n")
shapiro.test(data[sample(1:nrow(data),10000,replace=FALSE),"Weight"])
s h a p i r o . test ( r n o r m (100 , mean = 2 , sd = 5) )
shapiro.test ( rnorm (100 , mean = 2 , sd = 5) )
shapiro.test ( rnorm (100 , mean = 2 , sd = 5) )
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Medal"])
shapiro.test ( rnorm (100 , mean = 2 , sd = 5) )
shapiro.test(data[sample(1:nrow(data),5000,replace=FALSE),"Height"])
shapiro.test(data[sample(1:nrow(data),5000,replace=FALSE),"Age"])
shapiro.test(data[sample(1:nrow(data),5000,replace=FALSE),"Weight"])
#Проверяем на нормальное распределение
shapiro.test(data[sample(1:nrow(data),5000,replace=FALSE),"Height"])
shapiro.test(data[sample(1:nrow(data),5000,replace=FALSE),"Age"])
shapiro.test(data[sample(1:nrow(data),5000,replace=FALSE),"Weight"])
f=factor(data[sample(1:nrow(data),5000,replace=FALSE),"Medal"])
levels(f) = sort(levels(f))
shapiro.test(data[sample(1:nrow(data),5000,replace=FALSE),"Weight"])
qqPlot(data$Height)
library(car)
qqPlot(data$Height)
library(car)
qqPlot(data$Height)
library(car)
qqPlot(data$Height)
View(data)
unique(data[,'Sport'])
sort(unique(data[,'Sport']))
#Проверяем средний вес
data[data$Sport=="Gymnastics"]
#Проверяем средний вес
data[,data$Sport=="Gymnastics"]
#Проверяем средний вес
data[data$sport=="Gymnastics"]
#Проверяем средний вес
data[,data$sport=="Gymnastics"]
#Проверяем средний вес
data[,data$Sport=="Gymnastics"]
#Проверяем средний вес
data[data$Sport=="Gymnastics"]
data$Sport=="Gymnastics"
#Проверяем средний вес
data[data$Sport=="Gymnastics",]
#Проверяем средний вес
data_gym=data[data$Sport=="Gymnastics","Weight"]
data_gym
t.test(data_gym,mu=32)
t.test(data_gym,mu=55)
#Проведем тест без учета,что величина нормальная
wilcox.test(data_gym,mu=mean(data_gym),conf.int=TRUE)
#Проведем тест без учета,что величина нормальная
wilcox.test(data_gym,mu=62,conf.int=TRUE)
#Проведем тест без учета,что величина нормальная
wilcox.test(data_gym,mu=62,conf.int=TRUE)
#Проведем тест без учета,что величина нормальная
wilcox.test(data_gym,mu=61.999,conf.int=TRUE)
#Проверяем средний вес
data_gym=data[data$Sport=="Gymnastics","Weight"]
data_gym
t.test(data_gym,mu=55)
#Проведем тест без учета,что величина нормальная
wilcox.test(data_gym,mu=61.999,conf.int=TRUE)
hist(data_gym)
shapiro.test(data_gym)
shapiro.test(data_gym[sample(1:nrow(data),5000,replace=FALSE),])
shapiro.test(data_gym[sample(1:nrow(data),5000,replace=FALSE)])
t.test(data_gym,mu=61)
t.test(data_gym,mu=61.1)
t.test(data_gym,mu=61.11398)
t.test(data_gym,mu=61.1)
t.test(data_gym,mu=61.1)
#Проведем тест без учета,что величина нормальная
wilcox.test(data_gym,mu=61.999,conf.int=TRUE)
#Сделаем выборки 2-ух видов спорта
sort(unique(data$Sport))
#Сделаем выборки 2-ух видов спорта
sort(unique(data$Sport))
data_box=data[data$Sport=="Boxing","Weight"]
var(data_gym)
var(data_box)
shapiro.test(data_box[sample(1:nrow(data),5000,replace=FALSE)])
shapiro.test(data_gym[sample(1:nrow(data),5000,replace=FALSE)])
#Сделаем выборки 2-ух видов спорта
data_box_f=data[data$Sport=="Boxing"&&data$Sex=="F","Weight"]
#Сделаем выборки 2-ух видов спорта
data_box_f=data[data$Sport=="Boxing" and data$Sex=="F","Weight"]
#Сделаем выборки 2-ух видов спорта
data_box_f=data[data$Sport=="Boxing"&data$Sex=="F","Weight"]
data_box_f
data_box_m=data[data$Sport=="Boxing"&data$Sex=="M","Weight"]
data_gym_m=data[data$Sport=="Gymnastics"&data$Sex=="M","Weight"]
data_gym_f=data[data$Sport=="Gymnastics"&data$Sex=="F","Weight"]
var(data_box_m)
var(data_gym_m)
var(data_gym_f)
var(data_box_f)
t.test(data_gym_f~data_box_f)
t.test(data_gym_m~data_box_m)
t.test(data_gym_f,data_box_f)
t.test(data_gym_m,data_box_m)
wilcox.test(data_gym_f,data_box_f)
wilcox.test(data_gym_m,data_box_m)
data_box_f=data[data$Sport=="Boxing"&data$Sex=="F","Weight"]
data_box_m=data[data$Sport=="Boxing"&data$Sex=="M","Weight"]
data_gym_f=data[data$Sport=="Gymnastics"&data$Sex=="F","Weight"]
data_gym_m=data[data$Sport=="Gymnastics"&data$Sex=="M","Weight"]
var(data_gym_f)
var(data_box_f)
var(data_gym_m)
var(data_box_m)
shapiro.test(data_gym[sample(1:nrow(data),5000,replace=FALSE)])
shapiro.test(data_box[sample(1:nrow(data),5000,replace=FALSE)])
t.test(data_gym_f,data_box_f)
t.test(data_gym_m,data_box_m)
wilcox.test(data_gym_f,data_box_f)
wilcox.test(data_gym_m,data_box_m)
shapiro.test(data_gym_f[sample(1:nrow(data),5000,replace=FALSE)])
shapiro.test(data_box_f[sample(1:nrow(data),5000,replace=FALSE)])
shapiro.test(data_box_f[sample(1:nrow(data),5000,replace=FALSE)])
data_box_f
shapiro.test(data_box_f)
shapiro.test(data_gym_m[sample(1:nrow(data),5000,replace=FALSE)])
shapiro.test(data_box_m)
shapiro.test(data_gym_m)
data_gym_m
shapiro.test(data_gym_m[sample(1:nrow(data),5000,replace=FALSE)])
shapiro.test(data_box_m)
shapiro.test(data_box_m[sample(1:nrow(data),5000,replace=FALSE)])
shapiro.test(data_gym_f[sample(1:nrow(data),5000,replace=FALSE)])
shapiro.test(data_box_f)
shapiro.test(data_gym_m[sample(1:nrow(data),5000,replace=FALSE)])
shapiro.test(data_box_m[sample(1:nrow(data),5000,replace=FALSE)])
t.test(data_gym_f,data_box_f)
t.test(data_gym_m,data_box_m)
wilcox.test(data_gym_f,data_box_f)
wilcox.test(data_gym_m,data_box_m)
